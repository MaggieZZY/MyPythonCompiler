# Utilities for grammars

def rule_to_string(r):
    s = r[0][0] + ' := '
    for t in r[1]:
        s = s + t[0] + ' '
    return s
                          
def pprint_grammar(G): 
    for k in range(len(G)):
        print(str(k) + ": " + rule_to_string(G[k])) 
  
Grammar1_2 =    [(('S',),(('Top',),)),                  
         (('Top',),(('Assign',),)),                   
         (('Top',),(('Expr',),)),                       
         (('Top',),(('def',),('id',),('(',),(')',),(':',),('return',),('Expr',))),   
         (('Top',),(('def',),('id',),('(',),('id',),(')',),(':',),('return',),('Expr',))),   
         (('Top',),(('def',),('id',),('(',),('id',),(',',),('id',),(')',),(':',),('return',),('Expr',))),  
         (('Top',),(('def',),('id',),('(',),('id',),(',',),('id',),(',',),('id',),(')',),(':',),('return',),('Expr',))),      
         (('Assign',),(('id',),('=',),('Expr',))),         
         (('Expr',),(('if',),('Bor',),('then',),('Expr',),('else',),('Expr',))), 
         (('Expr',),(('lambda',),(':',),('Expr',))), 
         (('Expr',),(('lambda',),('id',),(':',),('Expr',))), 
         (('Expr',),(('lambda',),('id',),(',',),('id',),(':',),('Expr',))), 
         (('Expr',),(('lambda',),('id',),(',',),('id',),(',',),('id',),(':',),('Expr',))), 
         (('Expr',),(('let',),('Assign',),('in',),('Expr',))),       
         (('Expr',),(('Bor',),)), 
         (('Bor',),(('Bor',),('or',),('Band',))),   
         (('Bor',),(('Band',),)),                   
         (('Band',),(('Band',),('and',),('Bnot',))),
         (('Band',),(('Bnot',),)),                 
         (('Bnot',),(('not',),('Bnot',))),          
         (('Bnot',),(('C',),)),                     
         (('C',),(('E',),('==',),('E',))),          
         (('C',),(('E',),('!=',),('E',))),          
         (('C',),(('E',),('<',),('E',))),            
         (('C',),(('E',),('<=',),('E',))),          
         (('C',),(('E',),('>',),('E',))),            
         (('C',),(('E',),('>=',),('E',))),          
         (('C',),(('E',))),                         
         (('E',),(('E',),('+',),('T',))),           
         (('E',),(('E',),('-',),('T',))),           
         (('E',),(('T',),)),                       
         (('T',),(('T',),('*',),('F',))),          
         (('T',),(('T',),('/',),('F',))),          
         (('T',),(('T',),('%',),('F',))),          
         (('T',),(('F',),)),                       
         (('F',),(('-',),('F',))),                 
         (('F',),(('F1',),)),                       
         (('F1',),(('F2',), ('**',),('F1',))),     
         (('F1',),(('F2',),)),                                                                                   
         (('F2',),(('F2',), ('(',),(')',),) ),
         (('F2',),(('F2',), ('(',), ('Expr',), (')',),) ),
         (('F2',),(('F2',), ('(',), ('Expr',), (',',),('Expr',), (')',),) ),
         (('F2',),(('F2',), ('(',), ('Expr',), (',',),('Expr',), (',',),('Expr',), (')',),) ),
         (('F2',),(('id',),)),                      
         (('F2',),(('F3',),)), 
         (('F3',),(('int',),)),                    
         (('F3',),(('float',),)),                   
         (('F3',),(('True',),)),                   
         (('F3',),(('False',),)),  
         (('F3',),(('None',),)), 
         (('F3',),(('nil',),)), 
         (('F3',),(('cons',),)), 
         (('F3',),(('first',),)), 
         (('F3',),(('rest',),)), 
         (('F3',),(('(',),('Expr',),(')',))),
         (('F3',),(('[',),(']',))),
         (('F3',),(('[',),('EList',),(']',))),
         (('EList',),(('Expr',),(',',),('EList',))),      
         (('EList',),(('Expr',),)) ]        

pprint_grammar(Grammar1_2)
